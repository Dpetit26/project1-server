import socket

# Character mapping for shift cipher
CHAR_MAP = {
    'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8, 'J': 9,
    'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15, 'Q': 16, 'R': 17, 'S': 18,
    'T': 19, 'U': 20, 'V': 21, 'W': 22, 'X': 23, 'Y': 24, 'Z': 25,
    'a': 26, 'b': 27, 'c': 28, 'd': 29, 'e': 30, 'f': 31, 'g': 32, 'h': 33, 'i': 34,
    'j': 35, 'k': 36, 'l': 37, 'm': 38, 'n': 39, 'o': 40, 'p': 41, 'q': 42, 'r': 43,
    's': 44, 't': 45, 'u': 46, 'v': 47, 'w': 48, 'x': 49, 'y': 50, 'z': 51
}

REVERSE_MAP = {v: k for k, v in CHAR_MAP.items()}

# Constants
HOST = '127.0.0.1'
PORT = 65432
a = 250
b = 479


def calculate_k_prime(k):
    return (a * k + b) % 52


def decrypt(ciphertext, k_prime):
    plaintext = []
    for char in ciphertext:
        if char in CHAR_MAP:
            y = CHAR_MAP[char]
            x = (y - k_prime) % 52
            plaintext.append(REVERSE_MAP[x])
        else:
            plaintext.append(char)  # Leave non-alphabetic characters unchanged
    return ''.join(plaintext)


def main():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST, PORT))
        s.listen()
        print(f"Server listening on {HOST}:{PORT}")

        conn, addr = s.accept()
        with conn:
            print(f"Connected by {addr}")

            # Step 1: Receive k from client
            k = int(conn.recv(1024).decode())
            print(f"Received k: {k}")

            # Step 6: Calculate k'
            k_prime = calculate_k_prime(k)
            print(f"Calculated k': {k_prime}")

            while True:
                # Receive ciphertext from client
                ciphertext = conn.recv(1024).decode()
                if not ciphertext:
                    break

                print(f"Received ciphertext: {ciphertext}")

                # Step 10: Decrypt ciphertext
                plaintext = decrypt(ciphertext, k_prime)
                print(f"Decrypted plaintext: {plaintext}")
                print(f"Server display: (ciphertext: {ciphertext}, plaintext: {plaintext})")

                # Send acknowledgement
                conn.sendall(b"ACK: Message received and decrypted successfully")

    print("Server shutting down")


if __name__ == "__main__":
    main()
